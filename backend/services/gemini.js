const { GoogleGenerativeAI } = require("@google/generative-ai");
const Category = require("../models/Category");
const fs = require("fs");
require("dotenv").config();

const GEMINI_API_KEY='AIzaSyBO1XXS68R7HrRLOvQKwePDJBU7MePyJeU'

const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);

//Converts a file into a format suitable for generative AI models.
//This function reads a file, encodes its contents in Base64, and returns an object 
//containing the encoded data along with its MIME type.
function fileToGenerativePart(path, mimeType) {
  return {
    inlineData: {
      data: Buffer.from(fs.readFileSync(path)).toString("base64"),
      mimeType,
    },
  };
}

//function to predict the right category
async function classifyProduct(title, description, imagePath) {

  //instace of the genai model
  const model = genAI.getGenerativeModel({ model: "gemini-1.5-pro" });

  // Fetch categories directly from the database
  const categories = await Category.find();
  const categoryList = categories.map(category => category.name);

  // Create the string of the name in the category
  const categoryString = categoryList.length ? categoryList.join(', ') : "Others";

  // Generate the prompt dynamically
  const prompt = `Classify this product into one of the predefined categories. 
  If the product does not clearly fit into any of the given categories, return "Others":  
  - Title: ${title}  
  - Description: ${description}  

  Categories: ${categoryString}, Others  
  Return only the category name`;

  //select the suitable MIME type
  const imageType = imagePath.endsWith(".png") ? "image/png" : "image/jpeg";
  const imagePart = fileToGenerativePart(imagePath, imageType);

  //predict the category based on the prompt and the given image
  const generatedContent = await model.generateContent([prompt, imagePart]);

  //return the response generated by the ai
  const responseText = generatedContent.response.text().trim();
  return responseText;
}

module.exports = classifyProduct;